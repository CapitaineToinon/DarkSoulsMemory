using System;
using System.Collections.Generic;
using System.Linq;

namespace DarkSoulsMemory.Data {
    public static class Flags {

        /// <summary>
        /// List of the bosses flag ID
        /// </summary>
        public static readonly List<int> Bosses = Enum.GetValues(typeof(Bosses)).Cast<int>().ToList();

        public static int[] Items = {51000000, 51000010, 51000020, 51000030, 51000040, 51000050, 51000090, 51000100, 51000120, 51000140,
                                    51000170, 51000180, 51000190, 51000210, 51000240, 51000500, 51010000, 51010020, 51010040, 51010050,
                                    51010070, 51010080, 51010090, 51010100, 51010120, 51010140, 51010160, 51010210, 51010380, 51010400,
                                    51010130, 51010370, 51010430, 51010440, 51010470, 51010480, 51010490, 51010500, 51010510, 51010520,
                                    51010220, 51010260, 51010280, 51010300, 51010450, 51010460, 51020000, 51020010, 51020020, 51020030,
                                    51020040, 51020050, 51020060, 51020150, 51020160, 51020090, 51020170, 51020110, 51020120, 51020130,
                                    51020140, 51020210, 50001030, 51020070, 51020180, 51020190, 51020200, 51100010, 51100020, 51100030,
                                    51100040, 51100060, 51100070, 51100090, 51100100, 51100120, 51100130, 51100140, 51100150, 51100160,
                                    51100170, 51100190, 51100200, 51100210, 51100230, 51100240, 51100250, 51100260, 51100280, 51100290,
                                    51100300, 51100310, 51100320, 51100330, 51100340, 51100350, 51100370, 51100500, 51200030, 51200010,
                                    51200020, 51200040, 51200060, 51200070, 51200080, 51200180, 51200120, 51200150, 51200160, 51200170,
                                    51200190, 51200200, 51200210, 51200140, 51200500, 51200510, 51210010, 51210020, 51210030, 51210040,
                                    51210050, 51210060, 51210070, 51210080, 51210090, 51211000, 51210110, 51210160, 51210190, 51210210,
                                    51210220, 51210230, 51210240, 51210250, 51210260, 51210270, 51210280, 51210290, 51210300, 51210330,
                                    51210340, 51210350, 51210390, 51210400, 51210430, 51210440, 51210450, 51210460, 51210470, 51210500,
                                    51210510, 51210520, 51210540, 51210550, 51300000, 51300010, 51300020, 51300030, 51300070, 51300100,
                                    51300110, 51300140, 51300150, 51300190, 51300210, 51300220, 51300230, 51300240, 51300250, 51310000,
                                    51310010, 51310020, 51310030, 51310040, 51310050, 51310070, 51310080, 51310090, 51310100, 51310110,
                                    51310120, 51310140, 51310160, 51310180, 51310200, 51310220, 51310230, 51310240, 51310290, 51310300,
                                    51310500, 51320000, 51320020, 51320040, 51320050, 51320060, 51320070, 51320080, 51320090, 51320100,
                                    51320110, 51320120, 51320140, 51320150, 51320160, 51320170, 51320190, 51320180, 51400020, 51400040,
                                    51400050, 51400060, 51400080, 51400090, 51400100, 51400130, 51400140, 51400150, 51400160, 51400180,
                                    51400190, 51400210, 51400230, 51400250, 51400260, 51400270, 51400280, 51400290, 51400300, 51400310,
                                    51400320, 51400340, 51400350, 51400360, 51400370, 51400500, 51400510, 51400520, 51410000, 51410010,
                                    51410020, 51410030, 51410050, 51410060, 51410080, 51410090, 51410140, 51410160, 51410180, 51410230,
                                    51410250, 51410270, 51410310, 51410320, 51410330, 51410340, 51410360, 51410380, 51410390, 51410400,
                                    51410510, 51410530, 51410500, 51410100, 51410410, 51410520, 51500300, 51500310, 51500320, 51500330,
                                    51500350, 51500360, 51500400, 51500420, 51500070, 51500060, 51500010, 51500080, 51500150, 51500410,
                                    51500440, 51500000, 51500020, 51500040, 51500090, 51500100, 51510000, 51510030, 51510040, 51510050,
                                    51510060, 51510070, 51510080, 51510700, 51510510, 51510520, 51510530, 51510540, 51510570, 51510560,
                                    51510580, 51510590, 51510600, 51510610, 51510620, 51510660, 51510670, 51510680, 51510690, 51600000,
                                    51600020, 51600030, 51600040, 51600060, 51600070, 51600090, 51600100, 51600110, 51600120, 51600130,
                                    51600140, 51600150, 51600160, 51600170, 51600180, 51600190, 51600200, 51600210, 51600220, 51600250,
                                    51600260, 51600270, 51600280, 51600310, 51600330, 51600360, 51600370, 51600380, 51600520, 51600500,
                                    51600510, 51600290, 51700000, 51700010, 51700040, 51700060, 51700070, 51700080, 51700120, 51700150,
                                    51700160, 51700170, 51700180, 51700200, 51700210, 51700650, 51700510, 51700520, 51700530, 51700540,
                                    51700560, 51700580, 51700590, 51700600, 51700630, 51700640, 51700020, 51700050, 51800050, 51810000,
                                    51810060, 51810070, 51810080,
                                    51100980, // Firesurge hollow item flag
                                    51700990, // Duke's Archives Tower Cell Key Serpent item flag
                                    51320990  // Stone Dragon Tail
                                        };

        /// <summary>
        /// Used by GetOffset
        /// </summary>
        private static readonly Dictionary<string, int> Groups = new Dictionary<string, int>()
        {
            {"0", 0x00000},
            {"1", 0x00500},
            {"5", 0x05F00},
            {"6", 0x0B900},
            {"7", 0x11300},
        };

        /// <summary>
        /// Used by GetOffset
        /// </summary>
        private static readonly Dictionary<string, int> Areas = new Dictionary<string, int>()
        {
            {"000", 00},
            {"100", 01},
            {"101", 02},
            {"102", 03},
            {"110", 04},
            {"120", 05},
            {"121", 06},
            {"130", 07},
            {"131", 08},
            {"132", 09},
            {"140", 10},
            {"141", 11},
            {"150", 12},
            {"151", 13},
            {"160", 14},
            {"170", 15},
            {"180", 16},
            {"181", 17},
        };

        /// <summary>
        /// Flag method that calcuates the offset according to the flag ID
        /// This is literally magic 
        /// </summary>
        /// <param name="ID"></param>
        /// <param name="mask"></param>
        /// <returns></returns>
        public static int GetOffset(int ID, out uint mask)
        {
            string idString = ID.ToString("D8");

            if (idString.Length == 8)
            {
                string group = idString.Substring(0, 1);
                string area = idString.Substring(1, 3);
                int section = int.Parse(idString.Substring(4, 1));
                int number = int.Parse(idString.Substring(5, 3));

                if (Groups.ContainsKey(group) && Areas.ContainsKey(area))
                {
                    int offset = Groups[group];
                    offset += Areas[area] * 0x500;
                    offset += section * 128;
                    offset += (number - (number % 32)) / 8;

                    mask = 0x80000000 >> (number % 32);
                    return offset;
                }
            }

            throw new ArgumentException("Unknown event flag ID: " + ID);
        }
    }
}
